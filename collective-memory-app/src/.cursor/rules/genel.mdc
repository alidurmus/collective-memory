# Collective Memory System - Cursor AI Rules

## 🎯 **Primary Focus**
- **Turkish UI/Messages:** Kullanıcı arayüzü ve mesajlar Türkçe olmalı
- **English Code:** Tüm kod, değişken, fonksiyon isimleri İngilizce
- **Context7 Integration:** Context7 araçlarını kullan when available
- **Playwright Testing:** Sayfa testleri için Playwright kullan

## 🏗️ **Architecture Principles**
- Modular design with clear separation of concerns
- File monitoring using Watchdog library
- SQLite database for metadata and indexing
- Real-time search and query capabilities
- Terminal interface with interactive commands

## 📁 **File Structure Standards**
```
collective-memory-app/
├── src/
│   ├── main.py              # Ana uygulama ve CLI interface
│   ├── file_monitor.py      # Dosya izleme sistemi
│   ├── database_manager.py  # Veritabanı yönetimi
│   ├── content_indexer.py   # İçerik indeksleme
│   ├── query_engine.py      # Sorgu motoru
│   ├── terminal_interface.py # Terminal arayüzü
│   ├── cursor_db_reader.py  # Cursor veritabanı okuyucu
│   ├── context_collector.py # Context toplama
│   ├── query_builder.py     # Sorgu oluşturucu
│   └── trigger_parser.py    # Trigger parsing
├── config/                  # Konfigürasyon dosyları
├── tests/                   # Test dosyaları
└── docs/                    # Dokümantasyon
```

## 🔧 **Development Standards**
- Use type hints for all function parameters and returns
- Add docstrings to all classes and methods
- Follow PEP 8 style guidelines
- Use colorama for terminal output colors
- Handle exceptions gracefully with proper error messages
- Log important operations for debugging

## 🧪 **Testing Requirements**
- Use Playwright for integration tests
- Unit tests for all core functionality
- Test file monitoring capabilities
- Test database operations
- Test search and query features

## 📊 **Performance Guidelines**
- Efficient file monitoring with debouncing
- Optimized database queries with indexes
- Lazy loading for large file collections
- Memory-efficient content processing
- Fast search with relevance scoring

## 🔒 **Security Considerations**
- Validate all file paths to prevent directory traversal
- Sanitize database inputs
- Handle sensitive data appropriately
- Log security-relevant operations

## 🌐 **Integration Points**
- Original cursor comment-based triggers (@collect-memory:)
- New real-time file monitoring system
- Terminal interface for both modes
- Database-backed search and indexing

## 📝 **Documentation Requirements**
- Update README.md with new features
- Document all command-line arguments
- Provide usage examples
- Maintain architectural documentation
- Keep change logs for major updates

## 🚀 **Deployment Standards**
- Docker support for easy deployment
- Environment-based configuration
- Proper dependency management
- Health check endpoints
- Graceful shutdown handling

## 🔄 **Maintenance Guidelines**
- Regular database optimization
- File system cleanup procedures
- Performance monitoring
- Error tracking and resolution
- Version control best practices 