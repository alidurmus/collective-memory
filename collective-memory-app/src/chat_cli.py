#!/usr/bin/env python3
"""
Chat CLI - JSON Konu≈üma Y√∂netimi i√ßin Komut Satƒ±rƒ± Aray√ºz√º
Collective Memory JSON Chat Manager CLI interface
"""

import argparse
import sys
import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any
from colorama import Fore, Style, init
import subprocess
import os

# Initialize colorama
init()

from json_chat_manager import JSONChatManager


class ChatCLI:
    """JSON Chat Manager i√ßin CLI sƒ±nƒ±fƒ±"""

    def __init__(self, data_folder: str = None):
        self.chat_manager = JSONChatManager(data_folder)
        self.data_folder = data_folder or os.getcwd()

    def create_conversation(
        self, title: str, project_path: str = None, initial_message: str = None
    ):
        """Yeni konu≈üma olu≈ütur"""
        try:
            conversation_id = self.chat_manager.create_conversation(
                title=title,
                project_path=project_path or self.data_folder,
                initial_message=initial_message,
            )

            print(f"{Fore.GREEN}‚úÖ Yeni konu≈üma olu≈üturuldu:{Style.RESET_ALL}")
            print(f"   ID: {conversation_id}")
            print(f"   Ba≈ülƒ±k: {title}")
            print(f"   Proje: {project_path or self.data_folder}")

            return conversation_id

        except Exception as e:
            print(f"{Fore.RED}‚ùå Konu≈üma olu≈üturulamadƒ±: {e}{Style.RESET_ALL}")
            return None

    def add_message(self, conversation_id: str, content: str, role: str = "user"):
        """Konu≈ümaya mesaj ekle"""
        try:
            message_id = self.chat_manager.add_message(
                conversation_id=conversation_id, role=role, content=content
            )

            print(f"{Fore.GREEN}‚úÖ Mesaj eklendi:{Style.RESET_ALL}")
            print(f"   Mesaj ID: {message_id}")
            print(f"   Rol: {role}")
            print(f"   ƒ∞√ßerik: {content[:100]}{'...' if len(content) > 100 else ''}")

            return message_id

        except Exception as e:
            print(f"{Fore.RED}‚ùå Mesaj eklenemedi: {e}{Style.RESET_ALL}")
            return None

    def list_conversations(self, limit: int = 20, project_path: str = None):
        """Konu≈ümalarƒ± listele"""
        try:
            conversations = self.chat_manager.search_conversations(
                project_path=project_path, limit=limit
            )

            if not conversations:
                print(f"{Fore.YELLOW}üì≠ Hi√ß konu≈üma bulunamadƒ±{Style.RESET_ALL}")
                return

            print(
                f"{Fore.CYAN}üìã Konu≈ümalar ({len(conversations)} adet):{Style.RESET_ALL}\n"
            )

            for i, conv in enumerate(conversations, 1):
                created_date = conv["created_at"][:10]  # YYYY-MM-DD
                updated_date = conv["updated_at"][:10]

                print(f"{Fore.WHITE}{i:2d}.{Style.RESET_ALL} {conv['title']}")
                print(f"    ID: {conv['id']}")
                print(f"    Proje: {Path(conv['project_path']).name}")
                print(f"    Mesajlar: {conv['message_count']}")
                print(f"    Olu≈üturulma: {created_date}")
                print(f"    G√ºncellenme: {updated_date}")
                if conv["tags"]:
                    print(f"    Etiketler: {', '.join(conv['tags'])}")
                print()

        except Exception as e:
            print(f"{Fore.RED}‚ùå Konu≈ümalar listelenemedi: {e}{Style.RESET_ALL}")

    def show_conversation(self, conversation_id: str):
        """Konu≈üma detaylarƒ±nƒ± g√∂ster"""
        try:
            conversation = self.chat_manager.load_conversation(conversation_id)
            if not conversation:
                print(
                    f"{Fore.RED}‚ùå Konu≈üma bulunamadƒ±: {conversation_id}{Style.RESET_ALL}"
                )
                return

            print(f"{Fore.CYAN}üí¨ Konu≈üma Detaylarƒ±:{Style.RESET_ALL}\n")
            print(f"{Fore.WHITE}Ba≈ülƒ±k:{Style.RESET_ALL} {conversation.title}")
            print(f"{Fore.WHITE}ID:{Style.RESET_ALL} {conversation.id}")
            print(f"{Fore.WHITE}Proje:{Style.RESET_ALL} {conversation.project_path}")
            print(
                f"{Fore.WHITE}Olu≈üturulma:{Style.RESET_ALL} {conversation.created_at}"
            )
            print(
                f"{Fore.WHITE}G√ºncellenme:{Style.RESET_ALL} {conversation.updated_at}"
            )
            print(
                f"{Fore.WHITE}Mesaj Sayƒ±sƒ±:{Style.RESET_ALL} {len(conversation.messages)}"
            )
            if conversation.tags:
                print(
                    f"{Fore.WHITE}Etiketler:{Style.RESET_ALL} {', '.join(conversation.tags)}"
                )

            print(f"\n{Fore.CYAN}üìù Mesajlar:{Style.RESET_ALL}\n")

            for i, msg in enumerate(conversation.messages, 1):
                role_color = {
                    "user": Fore.BLUE,
                    "assistant": Fore.GREEN,
                    "system": Fore.YELLOW,
                }.get(msg.role, Fore.WHITE)

                role_emoji = {"user": "üë§", "assistant": "ü§ñ", "system": "‚öôÔ∏è"}.get(
                    msg.role, "‚ùì"
                )

                timestamp = msg.timestamp[:19].replace("T", " ")  # YYYY-MM-DD HH:MM:SS

                print(
                    f"{role_color}{role_emoji} {msg.role.upper()}{Style.RESET_ALL} - {timestamp}"
                )
                print(f"{msg.content}\n")
                print("-" * 80 + "\n")

        except Exception as e:
            print(f"{Fore.RED}‚ùå Konu≈üma g√∂sterilemedi: {e}{Style.RESET_ALL}")

    def search_conversations(self, query: str, limit: int = 10):
        """Konu≈ümalarda arama yap"""
        try:
            conversations = self.chat_manager.search_conversations(
                query=query, limit=limit
            )

            if not conversations:
                print(
                    f"{Fore.YELLOW}üîç '{query}' i√ßin sonu√ß bulunamadƒ±{Style.RESET_ALL}"
                )
                return

            print(
                f"{Fore.CYAN}üîç Arama Sonu√ßlarƒ± '{query}' ({len(conversations)} adet):{Style.RESET_ALL}\n"
            )

            for i, conv in enumerate(conversations, 1):
                print(f"{Fore.WHITE}{i}.{Style.RESET_ALL} {conv['title']}")
                print(f"   ID: {conv['id']}")
                print(f"   Proje: {Path(conv['project_path']).name}")
                print(f"   Mesajlar: {conv['message_count']}")
                print()

        except Exception as e:
            print(f"{Fore.RED}‚ùå Arama yapƒ±lamadƒ±: {e}{Style.RESET_ALL}")

    def export_conversation(
        self, conversation_id: str, format: str = "json", output_path: str = None
    ):
        """Konu≈ümayƒ± export et"""
        try:
            export_path = self.chat_manager.export_conversation(conversation_id, format)
            if not export_path:
                print(f"{Fore.RED}‚ùå Export ba≈üarƒ±sƒ±z{Style.RESET_ALL}")
                return

            # Eƒüer output_path belirtildiyse dosyayƒ± ta≈üƒ±
            if output_path:
                import shutil

                shutil.move(export_path, output_path)
                export_path = output_path

            print(f"{Fore.GREEN}‚úÖ Konu≈üma export edildi:{Style.RESET_ALL}")
            print(f"   Dosya: {export_path}")
            print(f"   Format: {format}")

        except Exception as e:
            print(f"{Fore.RED}‚ùå Export ba≈üarƒ±sƒ±z: {e}{Style.RESET_ALL}")

    def show_stats(self):
        """Konu≈üma istatistiklerini g√∂ster"""
        try:
            stats = self.chat_manager.get_conversation_stats()

            print(f"{Fore.CYAN}üìä Konu≈üma ƒ∞statistikleri:{Style.RESET_ALL}\n")
            print(
                f"{Fore.WHITE}Toplam Konu≈üma:{Style.RESET_ALL} {stats['total_conversations']}"
            )
            print(
                f"{Fore.WHITE}Toplam Mesaj:{Style.RESET_ALL} {stats['total_messages']}"
            )
            print(
                f"{Fore.WHITE}Storage Boyutu:{Style.RESET_ALL} {stats['storage_size']}"
            )
            if stats["last_activity"]:
                print(
                    f"{Fore.WHITE}Son Aktivite:{Style.RESET_ALL} {stats['last_activity'][:19].replace('T', ' ')}"
                )

            if stats["projects"]:
                print(f"\n{Fore.CYAN}üìÅ Projeler:{Style.RESET_ALL}")
                for project, count in stats["projects"].items():
                    print(f"   {project}: {count} konu≈üma")

            if stats["tags"]:
                print(f"\n{Fore.CYAN}üè∑Ô∏è  Etiketler:{Style.RESET_ALL}")
                for tag, count in stats["tags"].items():
                    print(f"   {tag}: {count} konu≈üma")

        except Exception as e:
            print(f"{Fore.RED}‚ùå ƒ∞statistikler alƒ±namadƒ±: {e}{Style.RESET_ALL}")

    def import_from_cursor(self):
        """Cursor chat'lerini import et"""
        try:
            from cursor_reader import EnhancedCursorDatabaseReader

            cursor_reader = EnhancedCursorDatabaseReader()

            print(f"{Fore.CYAN}üîÑ Cursor chat'leri import ediliyor...{Style.RESET_ALL}")
            imported_count = self.chat_manager.import_from_cursor(cursor_reader)

            print(
                f"{Fore.GREEN}‚úÖ {imported_count} konu≈üma Cursor'dan import edildi{Style.RESET_ALL}"
            )

        except Exception as e:
            print(f"{Fore.RED}‚ùå Cursor import ba≈üarƒ±sƒ±z: {e}{Style.RESET_ALL}")


def main():
    """Ana CLI fonksiyonu"""
    parser = argparse.ArgumentParser(
        description="Collective Memory JSON Chat Manager CLI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
√ñrnek Kullanƒ±mlar:
  # Yeni konu≈üma olu≈ütur
  python chat_cli.py create "Yeni Proje Planƒ±" --project "/path/to/project"
  
  # Konu≈ümalarƒ± listele
  python chat_cli.py list --limit 10
  
  # Konu≈üma detaylarƒ±nƒ± g√∂ster
  python chat_cli.py show CONVERSATION_ID
  
  # Konu≈ümalarda arama yap
  python chat_cli.py search "Context7 ERP"
  
  # ƒ∞statistikleri g√∂ster
  python chat_cli.py stats
  
  # Cursor'dan import et
  python chat_cli.py import-cursor
        """,
    )

    parser.add_argument("--data-folder", type=str, help="Veri klas√∂r√º yolu")

    subparsers = parser.add_subparsers(dest="command", help="Komutlar")

    # Create conversation
    create_parser = subparsers.add_parser("create", help="Yeni konu≈üma olu≈ütur")
    create_parser.add_argument("title", help="Konu≈üma ba≈ülƒ±ƒüƒ±")
    create_parser.add_argument("--project", type=str, help="Proje yolu")
    create_parser.add_argument("--message", type=str, help="ƒ∞lk mesaj")

    # Add message
    message_parser = subparsers.add_parser("add-message", help="Konu≈ümaya mesaj ekle")
    message_parser.add_argument("conversation_id", help="Konu≈üma ID")
    message_parser.add_argument("content", help="Mesaj i√ßeriƒüi")
    message_parser.add_argument(
        "--role", default="user", choices=["user", "assistant", "system"]
    )

    # List conversations
    list_parser = subparsers.add_parser("list", help="Konu≈ümalarƒ± listele")
    list_parser.add_argument(
        "--limit", type=int, default=20, help="Maksimum sonu√ß sayƒ±sƒ±"
    )
    list_parser.add_argument("--project", type=str, help="Proje filtresi")

    # Show conversation
    show_parser = subparsers.add_parser("show", help="Konu≈üma detaylarƒ±nƒ± g√∂ster")
    show_parser.add_argument("conversation_id", help="Konu≈üma ID")

    # Search conversations
    search_parser = subparsers.add_parser("search", help="Konu≈ümalarda arama yap")
    search_parser.add_argument("query", help="Arama sorgusu")
    search_parser.add_argument(
        "--limit", type=int, default=10, help="Maksimum sonu√ß sayƒ±sƒ±"
    )

    # Export conversation
    export_parser = subparsers.add_parser("export", help="Konu≈ümayƒ± export et")
    export_parser.add_argument("conversation_id", help="Konu≈üma ID")
    export_parser.add_argument("--format", choices=["json", "markdown"], default="json")
    export_parser.add_argument("--output", type=str, help="√áƒ±ktƒ± dosya yolu")

    # Stats
    subparsers.add_parser("stats", help="ƒ∞statistikleri g√∂ster")

    # Import from Cursor
    subparsers.add_parser("import-cursor", help="Cursor chat'lerini import et")

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    cli = ChatCLI(args.data_folder)

    try:
        if args.command == "create":
            cli.create_conversation(args.title, args.project, args.message)

        elif args.command == "add-message":
            cli.add_message(args.conversation_id, args.content, args.role)

        elif args.command == "list":
            cli.list_conversations(args.limit, args.project)

        elif args.command == "show":
            cli.show_conversation(args.conversation_id)

        elif args.command == "search":
            cli.search_conversations(args.query, args.limit)

        elif args.command == "export":
            cli.export_conversation(args.conversation_id, args.format, args.output)

        elif args.command == "stats":
            cli.show_stats()

        elif args.command == "import-cursor":
            cli.import_from_cursor()

    except KeyboardInterrupt:
        print(
            f"\n{Fore.YELLOW}‚ö†Ô∏è  ƒ∞≈ülem kullanƒ±cƒ± tarafƒ±ndan durduruldu{Style.RESET_ALL}"
        )
        sys.exit(1)
    except Exception as e:
        print(f"{Fore.RED}‚ùå Beklenmeyen hata: {e}{Style.RESET_ALL}")
        sys.exit(1)


if __name__ == "__main__":
    main()
