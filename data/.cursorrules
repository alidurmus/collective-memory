# üèõÔ∏è Context7 ERP System - Master Coding Rules & Standards
# Version: v2.2.0-glassmorphism-enhanced + QMS Integration + Modern Python Standards + SSL Implementation + Email System + Documentation Performance Optimization + Iterations Log System
# Status: Production Deployed & QMS Compliant
# Last Updated: 13 Temmuz 2025

## üéØ Project Overview
**Name**: Context7 Django ERP System
**Version**: v2.2.0-glassmorphism-enhanced + QMS Integration + Modern Python Standards + SSL Implementation + Email System + Documentation Performance Optimization + Iterations Log System
**Status**: ‚úÖ Production Deployed (100% Complete)
**Technology Stack**: Django 5.2.2, Python 3.12, PostgreSQL/SQLite, Context7 Glassmorphism Framework
**Live System**: http://31.97.44.248:8000
**QMS Status**: Central Protocol v1.0 Active
**Latest Enhancement**: ‚≠ê **Organized Iterations Log System** (13 Temmuz 2025)

## üèõÔ∏è QMS Central Protocol Authority
Following Context7 Central Protocol v1.0 with three specialized AI roles:

### AI Role Specialization System
1. **Coder AI (Primary)**: Code implementation, architecture, performance optimization
2. **Debugger & QA AI**: Testing, debugging, quality assurance, error resolution
3. **Documenter & Knowledge Manager AI**: Documentation, knowledge base management, standards compliance

### Error Reference System
Format: `ERR-[TYPE]-[YYMMDD]-[SEQUENCE]`
Types: DJANGO, API, DB, UI, ERP, AUTH, PERF, SEC

### Knowledge Base System  
Format: `REC-[MODULE]-[CATEGORY]-[YYMMDD]-[SEQUENCE]`
Modules: dashboard, erp, api, users, production, inventory, sales, reports

### ‚≠ê **NEW: Iterations Log System** (13 Temmuz 2025)
Organized development tracking system for AI agent optimization:
- **Daily Records**: `docs/iterations/daily-records/2025/07-july/`
- **Categories**: 8 specialized categories (documentation, performance, email-system, security, ui-ux, database, testing, deployment)
- **Major Iterations**: Milestone tracking with comprehensive documentation
- **AI Agent Optimization**: Structure designed for efficient historical activity reference
- **Cross-Reference System**: Links between related records across categories and time periods

## üìÇ Detailed Rules Reference
All detailed rules are organized in `.cursor/rules/` directory:

- **[Project Identity & Organization](/.cursor/rules/context7-project-rules.md)** - Project structure, identity, file organization + **Iterations Log System**
- **[Python & Django Standards](/.cursor/rules/python-coding-standards.md)** - Python/Django coding best practices
- **[API Development Standards](/.cursor/rules/api-development-standards.md)** - REST API, authentication, documentation
- **[Context7 Design Standards](/.cursor/rules/context7-design-standards.md)** - Glassmorphism UI framework, accessibility
- **[Testing & JavaScript Standards](/.cursor/rules/testing-standards.md)** - Testing standards, JavaScript/TypeScript rules
- **[Security & Deployment Standards](/.cursor/rules/security-deployment-standards.md)** - Security, backup, deployment procedures

## üöÄ Current System Status

### ‚úÖ Completed Modules (100% System Completion)
- **Dashboard**: Modern Glassmorphism Design ‚úÖ
- **ERP Core**: 8 departments (Production, Inventory, Sales, Finance, HR, Quality, Purchasing) ‚úÖ
- **UI Framework**: Context7 Glassmorphism Design System ‚úÖ
- **TODO System**: Modern Task Management with QMS integration ‚úÖ
- **QMS Integration**: Central Protocol, Error Reference, Knowledge Base ‚úÖ
- **‚≠ê Iterations Log System**: Organized development tracking ‚úÖ **NEW**

### üîÑ Active Modules (100% Complete)
- **API**: REST API + JWT Authentication (100%) ‚úÖ
- **Security**: Advanced Security Middleware (100%) ‚úÖ
- **Backup**: Automated Backup System (100%) ‚úÖ
- **Production**: Deployment Infrastructure (100%) ‚úÖ
- **Documentation Performance**: Optimization system active ‚úÖ

### üé® Design Framework Features
- Glassmorphism effects with backdrop-filter blur
- Spring animations with cubic-bezier transitions
- CSS custom properties color system
- WCAG 2.1 AA accessibility compliance
- Mobile-first responsive design

## üîß Core Development Rules

### Code Quality Standards
- **Python**: PEP8 compliance, type hints, docstrings
- **Django**: Class-based views, service layer pattern, ORM optimization
- **JavaScript**: ESLint/Prettier, modern ES6+, React best practices
- **Error Handling**: Try-catch blocks, custom exceptions, structured logging

### Security Implementation (Advanced)
- **XSS Protection**: Input sanitization, output encoding
- **CSRF Protection**: Django CSRF middleware active
- **Authentication**: JWT tokens, session security
- **Input Validation**: Server-side validation, data sanitization
- **Rate Limiting**: Multi-tier rate limiting middleware

### Performance Optimization
- **Database**: select_related/prefetch_related usage
- **Caching**: Redis integration, query result caching
- **Frontend**: Code splitting, lazy loading, image optimization
- **API**: Pagination, throttling, response optimization

### Testing Requirements
- **Unit Tests**: 80%+ coverage requirement
- **Integration Tests**: Service layer testing
- **E2E Tests**: Playwright for critical user flows
- **Test Organization**: Functional, unit, integration, security categories

## üé® Context7 Glassmorphism Design System

### Core Design Principles
- Modern glassmorphism pattern in all UI components
- Consistent visual hierarchy for professional UX
- Accessibility-first approach (WCAG 2.1 AA)
- Performance-optimized animations and transitions

### Color System & Gradients
```css
/* Primary gradient */
background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);

/* Glassmorphism effects */
background: rgba(255, 255, 255, 0.08);
backdrop-filter: blur(25px);
border: 1px solid rgba(255, 255, 255, 0.18);
border-radius: 20px;
box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
```

### Animation Standards
- Spring animations: `cubic-bezier(0.175, 0.885, 0.32, 1.275)`
- Transition duration: `0.3s` for smooth interactions
- Hover effects: `translateY(-2px) scale(1.02)` pattern
- GPU acceleration with transform properties

### Typography & Spacing
- Headings: `font-weight: 800`
- Container padding: `2rem` standard
- Component spacing: `1.5rem` baseline grid
- Line height: `1.4-1.6` for optimal readability

## üèóÔ∏è Django Architecture Rules

### Model Standards
- Use Django ORM with proper field types
- Add `created_at`, `updated_at` for audit trails
- Use Decimal fields for financial calculations
- Define Meta class with ordering and verbose_name
- Implement proper foreign key relationships with `on_delete`

### View Patterns
- Prefer Class-Based Views over Function-Based Views
- Implement business logic in service layer
- Use proper permission classes for access control
- Handle exceptions with custom exception classes

### API Development
- Use Django REST Framework ViewSets
- Implement JWT authentication with SimpleJWT
- Follow /api/v1/ versioning pattern
- Use pagination for list endpoints
- Implement proper serializers with validation

### ERP-Specific Rules
- Maintain 8 departmental dashboards
- Department-based access control
- Audit trail for all business transactions
- Financial calculations with proper decimal handling
- Multi-user support with role-based permissions

## üîí Security & Production Standards

### Advanced Security Implementation
- Multi-tier rate limiting middleware
- Comprehensive security headers
- Input validation and XSS prevention
- Session security monitoring
- File upload security validation
- IP-based security rules

### Production Deployment
- Environment variables configuration
- Database connection pooling
- Static files optimization
- SSL/TLS configuration
- Automated backup system
- Monitoring and alerting

### Backup & Recovery
- Daily automated database backups
- Media files backup with compression
- Backup integrity verification
- Retention policy implementation
- Recovery testing procedures

## üß™ Testing Framework

### Test Organization
```
tests/
‚îú‚îÄ‚îÄ functional/     # Functional tests
‚îú‚îÄ‚îÄ unit/          # Unit tests
‚îú‚îÄ‚îÄ integration/   # Integration tests
‚îî‚îÄ‚îÄ security/      # Security tests
```

### Testing Standards
- Use Django TestCase and unittest
- Factory pattern for test data generation
- Mock external dependencies
- Minimum 80% test coverage
- Playwright for E2E testing with Page Object Model

### JavaScript Testing
- Jest + Testing Library for React components
- Component testing for UI elements
- API integration testing
- Performance optimization testing

## üìä File Organization Rules

### Directory Structure
- **Documentation**: `docs/` organized in categories (api, deployment, system, reports)
- **Tests**: `tests/` organized by type
- **Utilities**: `utilities/` for helper scripts
- **Sample Data**: `sample_data/` for data creation scripts
- **Static Files**: Logical grouping in `static/`
- **‚≠ê Iterations**: `docs/iterations/` for development tracking **NEW**

### Documentation Standards
- README.md for each major component
- API documentation with Swagger/OpenAPI
- Deployment guides with step-by-step instructions
- System architecture documentation
- Code documentation with docstrings
- **‚≠ê Iterations tracking**: Daily records and milestone documentation **NEW**

## üéØ Quality Control Checklist

### Before Each Commit
- [ ] Code follows PEP8 standards
- [ ] Type hints added to functions
- [ ] Docstrings written for new functions/classes
- [ ] Security validation implemented
- [ ] Tests written and passing
- [ ] Error handling implemented
- [ ] Performance considerations addressed
- [ ] **‚≠ê Iterations log updated (if applicable)** **NEW**

### Before Each Release
- [ ] Full test suite passing (80%+ coverage)
- [ ] Security scan completed
- [ ] Performance testing done
- [ ] Documentation updated
- [ ] Deployment tested in staging
- [ ] Backup procedures verified
- [ ] **‚≠ê Major iteration documented** **NEW**

## üöÄ Development Workflow

### Git Workflow
- Feature branches for new development
- Pull requests with code review
- Conventional commit messages
- Automated CI/CD pipeline with testing

### Code Review Standards
- Security implications review
- Performance impact assessment
- Design consistency check
- Test coverage verification
- Documentation completeness
- **‚≠ê Iterations log consistency** **NEW**

### Environment Management
- Separate development/staging/production environments
- Environment-specific configuration
- Secure credential management
- Database migration procedures

## üîó External Resources & Dependencies

### Key Dependencies
- Django 5.2.2 with REST Framework
- PostgreSQL/SQLite database support
- Redis for caching
- JWT for authentication
- Celery for async tasks

### Frontend Technologies
- Modern JavaScript (ES6+)
- React for interactive components
- Context7 Glassmorphism framework
- Bootstrap for responsive design
- Chart.js for data visualization

## üìà Performance Targets

### Response Time Goals
- Page loads: <2 seconds
- API calls: <200ms
- Database queries: <50ms
- Static file delivery: <500ms

### Resource Optimization
- Database query optimization with ORM
- Frontend code splitting and lazy loading
- Image optimization and compression
- CDN integration for static assets

## üéâ Context7 Brand Standards

### Project Identity
- Consistent "Context7" branding across all components
- Professional glassmorphism design language
- Modern, accessible user interface
- Enterprise-grade functionality

### Voice & Tone
- Professional and user-friendly documentation
- Clear, actionable error messages
- Comprehensive help and guidance
- Inclusive and accessible language

---

## üìö Quick Reference Links

- **Main Project README**: [README.md](./README.md)
- **Documentation Index**: [docs/README.md](./docs/README.md)
- **API Documentation**: [docs/api/](./docs/api/)
- **Deployment Guides**: [docs/deployment/](./docs/deployment/)
- **System Documentation**: [docs/system/](./docs/system/)
- **Rules Directory**: [.cursor/rules/](./.cursor/rules/)
- **‚≠ê Iterations Log**: [docs/iterations/](./docs/iterations/) **NEW**

---

**üéØ Mission**: Build a production-ready, secure, performant, and maintainable ERP system that follows modern development practices and provides excellent user experience through the Context7 Glassmorphism design framework.

**üèÜ Achievement**: Successfully deployed production system with 100% completion, QMS compliance, enterprise-grade monitoring capabilities, and organized iterations tracking system.

**üìû Support**: Follow QMS Central Protocol for all development activities and maintain the highest standards of code quality, security, and user experience.







